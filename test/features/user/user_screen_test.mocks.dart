// Mocks generated by Mockito 5.4.6 from annotations
// in tetris_flutter/test/features/user/user_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tetris_flutter/app/db/database.dart' as _i3;
import 'package:tetris_flutter/app/di/depends.dart' as _i9;
import 'package:tetris_flutter/app/storage/storage_service.dart' as _i4;
import 'package:tetris_flutter/features/leaderboard/domain/i_leaderboard_repository.dart'
    as _i5;
import 'package:tetris_flutter/features/user/domain/i_user_repository.dart'
    as _i7;
import 'package:tetris_flutter/features/user/domain/state/user_cubit.dart'
    as _i6;
import 'package:tetris_flutter/features/user/domain/user_entity.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserEntity_0 extends _i1.SmartFake implements _i2.UserEntity {
  _FakeUserEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppDatabase_1 extends _i1.SmartFake implements _i3.AppDatabase {
  _FakeAppDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStorageService_2 extends _i1.SmartFake
    implements _i4.StorageService {
  _FakeStorageService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeILeaderboardRepository_3 extends _i1.SmartFake
    implements _i5.ILeaderboardRepository {
  _FakeILeaderboardRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCubit_4 extends _i1.SmartFake implements _i6.UserCubit {
  _FakeUserCubit_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i7.IUserRepository {
  @override
  _i8.Future<_i2.UserEntity> createUser(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [username],
        ),
        returnValue: _i8.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #createUser,
            [username],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #createUser,
            [username],
          ),
        )),
      ) as _i8.Future<_i2.UserEntity>);

  @override
  _i8.Future<_i2.UserEntity> setScores(
    String? username,
    int? scores,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setScores,
          [
            username,
            scores,
          ],
        ),
        returnValue: _i8.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #setScores,
            [
              username,
              scores,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #setScores,
            [
              username,
              scores,
            ],
          ),
        )),
      ) as _i8.Future<_i2.UserEntity>);

  @override
  _i8.Future<_i2.UserEntity?> getUserFromStorage() => (super.noSuchMethod(
        Invocation.method(
          #getUserFromStorage,
          [],
        ),
        returnValue: _i8.Future<_i2.UserEntity?>.value(),
        returnValueForMissingStub: _i8.Future<_i2.UserEntity?>.value(),
      ) as _i8.Future<_i2.UserEntity?>);

  @override
  _i8.Future<void> deleteUserFromStorage() => (super.noSuchMethod(
        Invocation.method(
          #deleteUserFromStorage,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i2.UserEntity> createUserFromLocalStorage() =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserFromLocalStorage,
          [],
        ),
        returnValue: _i8.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #createUserFromLocalStorage,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #createUserFromLocalStorage,
            [],
          ),
        )),
      ) as _i8.Future<_i2.UserEntity>);
}

/// A class which mocks [Depends].
///
/// See the documentation for Mockito's code generation for more information.
class MockDepends extends _i1.Mock implements _i9.Depends {
  @override
  _i3.AppDatabase get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeAppDatabase_1(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeAppDatabase_1(
          this,
          Invocation.getter(#db),
        ),
      ) as _i3.AppDatabase);

  @override
  _i4.StorageService get storageService => (super.noSuchMethod(
        Invocation.getter(#storageService),
        returnValue: _FakeStorageService_2(
          this,
          Invocation.getter(#storageService),
        ),
        returnValueForMissingStub: _FakeStorageService_2(
          this,
          Invocation.getter(#storageService),
        ),
      ) as _i4.StorageService);

  @override
  _i5.ILeaderboardRepository get leaderRepository => (super.noSuchMethod(
        Invocation.getter(#leaderRepository),
        returnValue: _FakeILeaderboardRepository_3(
          this,
          Invocation.getter(#leaderRepository),
        ),
        returnValueForMissingStub: _FakeILeaderboardRepository_3(
          this,
          Invocation.getter(#leaderRepository),
        ),
      ) as _i5.ILeaderboardRepository);

  @override
  _i6.UserCubit get userCubit => (super.noSuchMethod(
        Invocation.getter(#userCubit),
        returnValue: _FakeUserCubit_4(
          this,
          Invocation.getter(#userCubit),
        ),
        returnValueForMissingStub: _FakeUserCubit_4(
          this,
          Invocation.getter(#userCubit),
        ),
      ) as _i6.UserCubit);

  @override
  set db(_i3.AppDatabase? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set storageService(_i4.StorageService? _storageService) => super.noSuchMethod(
        Invocation.setter(
          #storageService,
          _storageService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set leaderRepository(_i5.ILeaderboardRepository? _leaderRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #leaderRepository,
          _leaderRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userCubit(_i6.UserCubit? _userCubit) => super.noSuchMethod(
        Invocation.setter(
          #userCubit,
          _userCubit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
